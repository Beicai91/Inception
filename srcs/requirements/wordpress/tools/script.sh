#!/bin/bash



# create directory to use in nginx container later 
mkdir /var/www/

# create diretory for WordPress files, removes any existing files before installing Wordpress
mkdir /var/www/wordpress
cd /var/www/wordpress
rm -rf *

# download WP-CLI -> a command-line interface tool for managing WordPress installations. That's why we can use command-line wp later
curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar 
chmod +x wp-cli.phar 
mv wp-cli.phar /usr/local/bin/wp

# download WordPress core files (PHP, CSS, JS etc.) into /var/www/html directory
wp core download --allow-root
# RENAME the sample config file coming with WordPress installation
mv /var/www/wordpress/wp-config-sample.php /var/www/wordpress/wp-config.php
# COPY OVER the custom wp-config.php file
mv /wp-config.php /var/www/wordpress/wp-config.php

# use `sed` to replace placeholders in wp-config.php with the actual env var values for databse name, username and password
sed -i -r "s/db1/$db_name/1"   wp-config.php
sed -i -r "s/user/$db_user/1"  wp-config.php
sed -i -r "s/pwd/$db_pwd/1"    wp-config.php

# install WordPress, setting up the basic infos like URL, title, admin username, password and email (this setup needs a correct updated wp-config.php file)
wp core install --url=$DOMAIN_NAME/ --title=$WP_TITLE --admin_user=$WP_ADMIN_USR --admin_password=$WP_ADMIN_PWD --admin_email=$WP_ADMIN_EMAIL --skip-email --allow-root

# create additional WordPress user with role of author who can write, edit and public their own posts etc
wp user create $WP_USR $WP_EMAIL --role=author --user_pass=$WP_PWD --allow-root

# install Astra theme for WordPress which designed for performance, offering fast loading times and a flexible structure for building websites
wp theme install astra --activate --allow-root

# install and activate Redis which is an In-memory Data Structure Store that can be used as a cache
wp plugin install redis-cache --activate --allow-root
wp plugin update --all --allow-root

# update PHP-FPM configuration file to make PHP-FPM listen on port 9000
# PHP-FPM (PHP FastCGI Process Manager) is a service that handles PHP code execution. Nginx forward PHP requests through port 9000 to PHP-FPM to handle
sed -i 's/listen = \/run\/php\/php7.3-fpm.sock/listen = 9000/g' /etc/php/7.3/fpm/pool.d/www.conf
# create directory for PHP runtime files generated by the work of PHP-FPM service when handling PHP requests
mkdir /run/php

# enable Redis caching for WordPress, improving site performance by storing frequently accessed data in memory
wp redis enable --allow-root

# start PHP-FPM service in foreground avec flag -F
/usr/sbin/php-fpm7.3 -F
